.           Один любой символ, кроме новой строки \n
?           0 или 1 вхождение шаблона слева
+           1 и более вхождений шаблона слева
*           0 и более вхождений шаблона слева
\w          Любая цифра или буква (\W — все, кроме буквы или цифры)
\d          Любая цифра [0-9] (\D — все, кроме цифры)
\s          Любой пробельный символ (\S — любой не пробельный символ)
\b          Граница слова
[..]        Один из символов в скобках ([^..] — любой символ, кроме тех, что в скобках)
\           Экранирование специальных символов (\. означает точку или \+ — знак «плюс»)
^ и $       Начало и конец строки соответственно
{n,m}       От n до m вхождений ({,m} — от 0 до m)
a | b       Соответствует a или b
()          Группирует выражение и возвращает найденный текст
\t, \n, \r  Символ табуляции, новой строки и возврата каретки соответственно

The special characters are:
    "."      Matches any character except a newline.
    "^"      Matches the start of the string.
    "$"      Matches the end of the string or just before the newline at
             the end of the string.
    "*"      Matches 0 or more (greedy) repetitions of the preceding RE.
             Greedy means that it will match as many repetitions as possible.
    "+"      Matches 1 or more (greedy) repetitions of the preceding RE.
    "?"      Matches 0 or 1 (greedy) of the preceding RE.
    *?,+?,?? Non-greedy versions of the previous three special characters.
    {m,n}    Matches from m to n repetitions of the preceding RE.
    {m,n}?   Non-greedy version of the above.
    "\\"     Either escapes special characters or signals a special sequence.
    []       Indicates a set of characters.
             A "^" as the first character indicates a complementing set.
    "|"      A|B, creates an RE that will match either A or B.
    (...)    Matches the RE inside the parentheses.
             The contents can be retrieved or matched later in the string.
    (?aiLmsux) The letters set the corresponding flags defined below.
    (?:...)  Non-grouping version of regular parentheses.
    (?P<name>...) The substring matched by the group is accessible by name.
    (?P=name)     Matches the text matched earlier by the group named name.
    (?#...)  A comment; ignored.
    (?=...)  Matches if ... matches next, but doesn't consume the string.
    (?!...)  Matches if ... doesn't match next.
    (?<=...) Matches if preceded by ... (must be fixed length).
    (?<!...) Matches if not preceded by ... (must be fixed length).
    (?(id/name)yes|no) Matches yes pattern if the group with id/name matched,
                       the (optional) no pattern otherwise.


The special sequences consist of "\\" and a character from the list
below.  If the ordinary character is not on the list, then the
resulting RE will match the second character.
    \number  Matches the contents of the group of the same number.
    \A       Matches only at the start of the string.
    \Z       Matches only at the end of the string.
    \b       Matches the empty string, but only at the start or end of a word.
    \B       Matches the empty string, but not at the start or end of a word.
    \d       Matches any decimal digit; equivalent to the set [0-9] in
             bytes patterns or string patterns with the ASCII flag.
             In string patterns without the ASCII flag, it will match the whole
             range of Unicode digits.
    \D       Matches any non-digit character; equivalent to [^\d].
    \s       Matches any whitespace character; equivalent to [ \t\n\r\f\v] in
             bytes patterns or string patterns with the ASCII flag.
             In string patterns without the ASCII flag, it will match the whole
             range of Unicode whitespace characters.
    \S       Matches any non-whitespace character; equivalent to [^\s].
    \w       Matches any alphanumeric character; equivalent to [a-zA-Z0-9_]
             in bytes patterns or string patterns with the ASCII flag.
             In string patterns without the ASCII flag, it will match the
             range of Unicode alphanumeric characters (letters plus digits
             plus underscore).
             With LOCALE, it will match the set [0-9_] plus characters defined
             as letters for the current locale.
    \W       Matches the complement of \w.
    \\       Matches a literal backslash.



''' ----------------------------- флаги и проверки -----------------------------'''
re.A, re.ASCII       При этом флаге проверки \b, \B, \s, \S, \w и \W действуют так,
                     как если бы они применялись к тексту, содержащему только
                     символы ASCII (по умолчанию используется Юникод
                     re.U / re.UNICODE и лучше оставаться в этом режиме)
re.I, re.IGNORECASE  Проверка без учета регистра символов
re.M, re.MULTILINE   Влияет на проверки ^ и $. Начало ^ считается началом строки
                     (сразу после символа \n или начало текста). Конец $ считается
                     в позиции перед \n (или конец строки)
re.S, re.DOTALL      При установке этого флага символ . также включает символ
                     перевода строки \n.
re.X, re.VERBOSE     Позволяет включать в регулярные выражения пробелы и комментарии
re.DEBUG             Включает режим отладки при компиляции регулярного выражения



^           Начало текста (с флагом re.MULTILINE – начало строки)
$           Конец текста (с флагом re.MULTILINE – позиция перед символом переноса строки \n)
\A          Начало текста
\b          Граница слова (внутри символьных классов [] соответствует символу BACKSPACE)
\B          Граница не слова (зависим от флага re.ASCII)
\Z          Конец текста
(?=exp)     Проверка на совпадение с выражением exp продолжения строки. При этом позиция
            поиска не смещается на выражение exp (опережающая проверка).
(?!exp)     Проверка на несовпадение с выражением exp продолжения строки. (Также опережающая проверка).
(?<=exp)    Проверка на совпадение с выражением exp хвоста уже обработанной (проверенной)
            строки. Она также называется позитивной ретроспективной проверкой.
(?<!exp)    Проверка на несовпадение с выражением exp хвоста уже обработанной (проверенной) строки.
            Еще она называется негативной ретроспективной проверкой.



''' ----------------------------------------- функции модуля re -----------------------------------------'''
This module exports the following functions:
    match     Match a regular expression pattern to the beginning of a string.
    fullmatch Match a regular expression pattern to all of a string.
    search    Search a string for the presence of a pattern.
    sub       Substitute occurrences of a pattern found in a string.
    subn      Same as sub, but also return the number of substitutions made.
    split     Split a string by the occurrences of a pattern.
    findall   Find all occurrences of a pattern in a string.
    finditer  Return an iterator yielding a Match object for each match.
    compile   Compile a pattern into a Pattern object.
    purge     Clear the regular expression cache.
    escape    Backslash all non-alphanumerics in a string.
